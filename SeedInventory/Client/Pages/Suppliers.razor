@page "/suppliers"
@inject HttpClient Http
@using SeedInventory.Shared.Models

<h3>Suppliers</h3>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="CreateNew">Add Supplier</button>
</div>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (suppliers?.Any() != true)
{
    <p>No suppliers found.</p>
}
else
{
    <div class="row">
        @foreach (var s in suppliers)
        {
            <div class="col-12 col-sm-6 col-md-4 mb-3">
                <div class="card">
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title">@s.Name</h5>
                        <p class="card-text">Contact: @s.Contact</p>
                        <p class="card-text">@s.Address</p>
                        <div class="mt-auto d-flex gap-2">
                            <button class="btn btn-sm btn-outline-secondary" @onclick="() => Edit(s.Id)">Edit</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(s.Id)">Delete</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

<SupplierForm @ref="supplierForm" OnSaved="Refresh" />
<ConfirmDialog @ref="confirmDelete" Title="Delete supplier?" OnClose="OnDeleteConfirmed">
    <p>Are you sure you want to delete this supplier?</p>
</ConfirmDialog>

@code {
    List<Supplier>? suppliers;
    bool isLoading = true;
    SupplierForm? supplierForm;
    ConfirmDialog? confirmDelete;
    int deleteId = 0;

    protected override async Task OnInitializedAsync() => await Load();

    async Task Load()
    {
        isLoading = true;
        suppliers = await Http.GetFromJsonAsync<List<Supplier>>("api/suppliers");
        isLoading = false;
    }

    void CreateNew() => supplierForm?.Open(new Supplier());

    void Edit(int id)
    {
        var s = suppliers?.FirstOrDefault(x => x.Id == id);
        if (s != null) supplierForm?.Open(new Supplier { Id = s.Id, Name = s.Name, Contact = s.Contact, Address = s.Address });
    }

    async Task Refresh() => await Load();

    async Task ConfirmDelete(int id)
    {
        deleteId = id;
        await confirmDelete?.ShowAsync();
    }

    async Task OnDeleteConfirmed(bool ok)
    {
        if (!ok) return;
        await Http.DeleteAsync($"api/suppliers/{deleteId}");
        await Load();
    }
}
