@page "/seeds"
@inject HttpClient Http
@using SeedInventory.Shared.Models

<h3>Seeds</h3>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="CreateNew">Add Seed</button>
</div>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (seeds?.Any() != true)
{
    <p>No seeds found.</p>
}
else
{
    <div class="row">
        @foreach (var seed in seeds)
        {
            <div class="col-12 col-sm-6 col-md-4 mb-3">
                <div class="card h-100">
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title">@seed.Name (@seed.Variety)</h5>
                        <p class="card-text">Variety: @seed.Variety</p>
                        <p class="card-text">Batch: @seed.BatchNo</p>
                        <p class="card-text">Unit: @seed.UnitName</p>
                        <p class="card-text">Qty: @seed.Quantity</p>
                        <p class="card-text">Supplier: @seed.Supplier</p>
                        <p class="card-text">Purchased: @seed.PurchaseDate.ToString("yyyy-MM-dd")</p>
                        <p class="card-text">Expire: @seed.ExpiryDate.ToString("yyyy-MM-dd")</p>

                        <div class="mt-auto d-flex gap-2">
                            <button class="btn btn-sm btn-outline-secondary" @onclick="() => Edit(seed.Id)">Edit</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(seed.Id)">Delete</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

<SeedForm @ref="seedForm" OnSaved="Refresh" />

<ConfirmDialog @ref="confirmDelete" Title="Delete seed?" OnClose="OnDeleteConfirmed">
    <p>Are you sure you want to delete this seed?</p>
</ConfirmDialog>

@code {
    List<Seed>? seeds;
    bool isLoading = true;
    SeedForm? seedForm;
    ConfirmDialog? confirmDelete;
    int deleteId = 0;

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    async Task Load()
    {
        isLoading = true;
        seeds = await Http.GetFromJsonAsync<List<Seed>>("api/seeds");
        isLoading = false;
    }

    void CreateNew()
    {
        seedForm?.Open(new Seed { PurchaseDate = DateTime.UtcNow });
    }

    void Edit(int id)
    {
        var seed = seeds?.FirstOrDefault(s => s.Id == id);
        if (seed != null) seedForm?.Open(new Seed
        {
            Id = seed.Id,
            Name = seed.Name,
            Variety = seed.Variety,
            Quantity = seed.Quantity,
            Supplier = seed.Supplier,
            PurchaseDate = seed.PurchaseDate,
            Notes = seed.Notes
        });
    }

    async Task Refresh()
    {
        await Load();
        StateHasChanged();
    }

    async Task ConfirmDelete(int id)
    {
        deleteId = id;
        await confirmDelete?.ShowAsync();
    }

    async Task OnDeleteConfirmed(bool ok)
    {
        if (!ok) return;
        await Http.DeleteAsync($"api/seeds/{deleteId}");
        await Load();
    }
}
